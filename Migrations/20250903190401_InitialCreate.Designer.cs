// <auto-generated />
using System;
using BarberApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarberApi.Migrations
{
    [DbContext(typeof(BarberShopDbContext))]
    [Migration("20250903190401_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BarberApi.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("AppointmentEndDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("BarberId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentDateTime")
                        .HasDatabaseName("IX_Appointment_DateTime");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Appointments_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Appointments_IsActive");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Appointment_Status");

                    b.HasIndex("UserId");

                    b.HasIndex("BarberId", "AppointmentDateTime")
                        .HasDatabaseName("IX_Appointment_Barber_DateTime");

                    b.HasIndex("CustomerId", "AppointmentDateTime")
                        .HasDatabaseName("IX_Appointment_Customer_DateTime");

                    b.HasIndex("BarberId", "AppointmentDateTime", "AppointmentEndDateTime")
                        .IsUnique()
                        .HasDatabaseName("IX_Appointment_Barber_TimeSlot");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("BarberApi.Models.AppointmentService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AppointmentServices_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AppointmentServices_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_AppointmentService_Name_Unique");

                    b.ToTable("AppointmentServices", null, t =>
                        {
                            t.HasCheckConstraint("CK_AppointmentService_PositiveDuration", "DurationMinutes > 0");

                            t.HasCheckConstraint("CK_AppointmentService_PositivePrice", "Price >= 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("66da4319-f41d-43e6-a33c-7cb4e54936e5"),
                            CreatedAt = new DateTime(2025, 9, 3, 19, 4, 1, 358, DateTimeKind.Utc).AddTicks(298),
                            Description = "Standard haircut and styling",
                            DurationMinutes = 30,
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 9, 3, 19, 4, 1, 358, DateTimeKind.Utc).AddTicks(299),
                            Name = "Haircut",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = new Guid("55ac64dd-b3a4-4be4-ba7f-99ef0fdaed5d"),
                            CreatedAt = new DateTime(2025, 9, 3, 19, 4, 1, 358, DateTimeKind.Utc).AddTicks(310),
                            Description = "Standard beard trimming",
                            DurationMinutes = 15,
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 9, 3, 19, 4, 1, 358, DateTimeKind.Utc).AddTicks(310),
                            Name = "Beard Trim",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = new Guid("16309cb8-6949-4a8a-8367-49e9b12213c9"),
                            CreatedAt = new DateTime(2025, 9, 3, 19, 4, 1, 358, DateTimeKind.Utc).AddTicks(313),
                            Description = "Hair washing and conditioning",
                            DurationMinutes = 10,
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 9, 3, 19, 4, 1, 358, DateTimeKind.Utc).AddTicks(314),
                            Name = "Hair wash",
                            Price = 10.00m
                        });
                });

            modelBuilder.Entity("BarberApi.Models.AppointmentServiceMapping", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("char(36)");

                    b.HasKey("AppointmentId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServiceMappings", (string)null);
                });

            modelBuilder.Entity("BarberApi.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NewValues")
                        .HasColumnType("json");

                    b.Property<string>("OldValues")
                        .HasColumnType("json");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_AuditLog_CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_AuditLogs_IsActive");

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_AuditLog_Entity");

                    b.ToTable("AuditLogs", (string)null);
                });

            modelBuilder.Entity("BarberApi.Models.Barber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Picture")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Specialities")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Barbers_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Barbers_Email_Unique")
                        .HasFilter("Email IS NOT NULL");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Barbers_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Barbers_Name");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("IX_Barbers_Phone_Unique");

                    b.ToTable("Barbers", (string)null);
                });

            modelBuilder.Entity("BarberApi.Models.BusinessSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AdvanceBookingDays")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("SlotDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("WorkingDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_BusinessSettings_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_BusinessSettings_IsActive");

                    b.ToTable("BusinessSettings", null, t =>
                        {
                            t.HasCheckConstraint("CK_BusinessSettings_PositiveAdvanceBooking", "AdvanceBookingDays > 0");

                            t.HasCheckConstraint("CK_BusinessSettings_PositiveSlotDuration", "SlotDurationMinutes > 0");

                            t.HasCheckConstraint("CK_BusinessSettings_ValidHours", "OpeningTime < ClosingTime");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd4c2522-66b6-4c95-9138-1e45ec5b1458"),
                            AdvanceBookingDays = 30,
                            ClosingTime = new TimeSpan(0, 18, 0, 0, 0),
                            CreatedAt = new DateTime(2025, 9, 3, 19, 4, 1, 357, DateTimeKind.Utc).AddTicks(3355),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 9, 3, 19, 4, 1, 357, DateTimeKind.Utc).AddTicks(3356),
                            OpeningTime = new TimeSpan(0, 9, 0, 0, 0),
                            SlotDurationMinutes = 30,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkingDays = 31
                        });
                });

            modelBuilder.Entity("BarberApi.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Picture")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("PreferredBarberId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Customers_CreatedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Customer_Email_Unique")
                        .HasFilter("Email IS NOT NULL");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Customers_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Customer_Name");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("IX_Customer_Phone_Unique");

                    b.HasIndex("PreferredBarberId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("BarberApi.Models.NotificationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_NotificationLogs_CreatedAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_NotificationLogs_IsActive");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_NotificationLog_Status");

                    b.HasIndex("AppointmentId", "Type")
                        .HasDatabaseName("IX_NotificationLog_Appointment_Type");

                    b.ToTable("NotificationLogs", (string)null);
                });

            modelBuilder.Entity("BarberApi.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BarberId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BarberId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Users_CreatedAt");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Username");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BarberApi.Models.Appointment", b =>
                {
                    b.HasOne("BarberApi.Models.Barber", "Barber")
                        .WithMany("Appointments")
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarberApi.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarberApi.Models.User", null)
                        .WithMany("CreatedAppointments")
                        .HasForeignKey("UserId");

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BarberApi.Models.AppointmentServiceMapping", b =>
                {
                    b.HasOne("BarberApi.Models.Appointment", "Appointment")
                        .WithMany("Services")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberApi.Models.AppointmentService", "Service")
                        .WithMany("AppointmentServiceMappings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BarberApi.Models.AuditLog", b =>
                {
                    b.HasOne("BarberApi.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberApi.Models.Customer", b =>
                {
                    b.HasOne("BarberApi.Models.Barber", "Barber")
                        .WithMany("PreferredByCustomers")
                        .HasForeignKey("PreferredBarberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Barber");
                });

            modelBuilder.Entity("BarberApi.Models.NotificationLog", b =>
                {
                    b.HasOne("BarberApi.Models.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BarberApi.Models.User", b =>
                {
                    b.HasOne("BarberApi.Models.Barber", "Barber")
                        .WithMany()
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BarberApi.Models.Customer", "Customer")
                        .WithOne("User")
                        .HasForeignKey("BarberApi.Models.User", "CustomerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Barber");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BarberApi.Models.Appointment", b =>
                {
                    b.Navigation("Notifications");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BarberApi.Models.AppointmentService", b =>
                {
                    b.Navigation("AppointmentServiceMappings");
                });

            modelBuilder.Entity("BarberApi.Models.Barber", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PreferredByCustomers");
                });

            modelBuilder.Entity("BarberApi.Models.Customer", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("BarberApi.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CreatedAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
